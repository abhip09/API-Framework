{
	"info": {
		"_postman_id": "be3ba270-c88d-4eb8-b973-58927f939703",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13567395"
	},
	"item": [
		{
			"name": "Login-POST Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"tushar.bhadane+frontdesk@thinkitive.com\",\r\n    \"password\" : \"Bluesky@123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://qa-api.blueskytelepsychiatry.com/api/master/login",
					"protocol": "https",
					"host": [
						"qa-api",
						"blueskytelepsychiatry",
						"com"
					],
					"path": [
						"api",
						"master",
						"login"
					]
				},
				"description": "\n### Login API\n\nThis API endpoint is used to authenticate and obtain access tokens for the user.\n\n#### Request Body\n- **username** (string, required): The username of the user.\n- **password** (string, required): The password of the user.\n\n#### Response\nThe response will be a JSON object with the following schema:\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"date\": {\n            \"type\": \"string\"\n        },\n        \"code\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": [\"string\", \"null\"]\n        },\n        \"data\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"scope\": {\n                    \"type\": \"string\"\n                },\n                \"access_token\": {\n                    \"type\": \"string\"\n                },\n                \"expires_in\": {\n                    \"type\": \"number\"\n                },\n                \"token_type\": {\n                    \"type\": \"string\"\n                },\n                \"refresh_token\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\"scope\", \"access_token\", \"expires_in\", \"token_type\", \"refresh_token\"]\n        },\n        \"path\": {\n            \"type\": \"string\"\n        },\n        \"requestId\": {\n            \"type\": \"string\"\n        },\n        \"version\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"date\", \"code\", \"data\", \"path\", \"requestId\", \"version\"]\n}\n"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//const verifyResponse = pm.require('@dark-robot-846751/validate-response');\r",
					"\r",
					"\r",
					"twoDarray = pm.collectionVariables.get(\"twoDarray\")\r",
					"console.log(twoDarray);\r",
					"\r",
					"// Split the input data by comma\r",
					"const abc = twoDarray.split(',');\r",
					"\r",
					"// Filter out \"null\" keyword and numbers less than 100\r",
					"const filtered_data = abc.filter(x => x !== \"null\" && (isNaN(x) || parseInt(x) >= 100));\r",
					"\r",
					"// Reconstruct the output string\r",
					"const output_data = filtered_data.join(',');\r",
					"\r",
					"console.log(output_data);\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"/*\r",
					"\r",
					"\r",
					"var ExpectedStatuscode = pm.iterationData.get(\"ExpectedStatuscode\")\r",
					"var TestScenarioSummary = pm.iterationData.get(\"Test Scenario Summary\")\r",
					"console.log(ExpectedStatuscode,TestScenarioSummary) \r",
					"console.log(\"------------------------------------------------------\")\r",
					"const parsedArray = verifyResponse.verifyResponse(ExpectedStatuscode,TestScenarioSummary)\r",
					"*/"
				]
			}
		}
	],
	"variable": [
		{
			"key": "twoDarray",
			"value": "",
			"type": "string"
		}
	]
}