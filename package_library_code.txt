// Use module.exports to export the functions that should be
// available to use from this package.
// module.exports = { <your_function> }

// Once exported, use this statement in your scripts to use the package.
// const myPackage = pm.require('<package_name>')

/************   Below are the functions which are present in this package library ******
    SrNo.  ||  Function Name                ||  Description
      1    ||  add                          || 
      2    ||  verifyResponse               ||
      3    ||  convertresponsetoarray       ||
      4    ||  findValueIn2DArray           ||
      5    ||  validatevalues				|| This function check values in response. 

*/
module.exports = {
    add,
    verifyResponse,
    findValueIn2DArray,
    eliminatenull,
    splitkey,
    executetest,
    JsonArrayTraversal
}

/******************************************************************* */
function add(a, b) {
    console.log(a)
    console.log(b)
    return a + b
}

/******************************************************************* */

function verifyResponse(request_body_array) {


    var jsonData = pm.response.json();

    JsonArrayTraversal(jsonData);

    validatevalues(request_body_array, responsevaluearray)

}

/******************************************************************* */


function findValueIn2DArray(array, targetValue) {

    let foundflag = 0

    for (let i = 0; i < array.length; i++) {
        for (let j = 0; j < array[i].length; j++) {
            if (array[i][j] === targetValue) {
                // console.log(`Found ${targetValue} at row ${i} and column ${j}.`);
                foundflag = 1

                return [i, j]; // Return the indices of the value

            }
        }
    }
    if (foundflag === 0) {
        console.log(`${targetValue} not found!!`);
        return null; // Value not found
    }
}

/******************************************************************* */

function eliminatenull(rowarray) {


    let input_data = rowarray.toString();

    let data_array = input_data.split(',');

    let filtered_data_array = data_array.filter(x => x !== "null" && (isNaN(x) || parseInt(x) >= 100));

    let output_data = filtered_data_array.join(',');

    const myarray = output_data.split(",")

    return myarray

}

/******************************************************************* */

function splitkey(key) {

    const Rvalue = key.split(":");
    Rvalue[1] = Rvalue[1].trim()
    return Rvalue[1]

}

/******************************************************************* */

function JsonArrayTraversal(object) {

    for (let key in object) {
        if (typeof object[key] === 'object') {
            JsonArrayTraversal(object[key]);

        } else {
            var responsevalue = object[key]

            addvaluetoresponsearray(responsevalue)
        }
    }
}

/******************************************************************* */

const responsevaluearray = [];

function addvaluetoresponsearray(responsevalue) {

    responsevaluearray.push(responsevalue);

}


/*************************************************************/

function executetest() {

    console.log("Great value found!!")
}


/******************************************************************* */


function validatevalues(request_body_array, responsevaluearray) {
        let TestScenarioSummary = request_body_array[3].split(":")
                       
    var hasNumber = /\d/;

    for (var i = 0; i < request_body_array.length; i++) {

        requestvalue = request_body_array[i]

        var found = requestvalue.indexOf("value");

        if (found !== -1) {

            let valuecheck = requestvalue.split(":")
            valuecheck[1] = valuecheck[1].replaceAll(' ', '');

            if (valuecheck[1].length !== 0) {

                if (hasNumber.test(valuecheck[1]) === true) {
                    valuecheck[1] = parseInt(valuecheck[1])
                }
                
                pm.test(TestScenarioSummary[1], function() {
                    pm.expect(pm.response.text()).to.include(valuecheck[1]);
                    console.log("To Check " + valuecheck[1] + " value in response")

                });
                
                
            }
        }

        var ExpectedStatuscode = requestvalue.indexOf("ExpectedStatuscode");

        if (ExpectedStatuscode !== -1) {

            let valuecheck = requestvalue.split(":")

            valuecheck[1] = valuecheck[1].replaceAll(' ', '');

            if (valuecheck[1].length !== 0) {

                if (hasNumber.test(valuecheck[1]) === true) {
                    valuecheck[1] = parseInt(valuecheck[1])
                }

                pm.test("Verify expected statuscode in response", function() {

                    pm.response.to.have.status(valuecheck[1])

                });
            }

        }

    }
}
/******************************************************************* */